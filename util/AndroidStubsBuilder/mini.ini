[general]
# The path to the Android-SDK. It can be overwritten using the command line option
# '--sdk-path'. If no information is present typical places are searched for the sdk.
; sdk = /opt/andoird-sdk/

# The platform (subfolder under sdk/platforms/) to build the stubs from. This can be
# overwritten using the command line option '--platform'. Usable platforms may be 
# listed using `stubsBuilder platforms`
; platform = android-18

# The stubs from the Android SDK to collect class-files from.
# The order of these files does actually matter: class-files from the later jar
# overwrite the previous ones.
jars = uiautomator.jar 
    data/layoutlib.jar 
    android.jar 
    ../../extras/android/support/v4/android-support-v4.jar
    ../../extras/android/support/v7/appcompat/libs/android-support-v7-appcompat.jar

# A list of java-files to use from the Android SDK. 
# The paths are relative to $SDK/sources/$PLATFORM. They are whitespace separated.
# Text replacements specified in the "stubify"-section of this file are applied to
# these files.
copy_in = android/os/StrictMode.java 
#    android/app/Activity.java 
    android/app/Application.java 
    android/os/Binder.java 
    android/os/AsyncTask.java
#    android/app/Instrumentation.java 
#    android/app/LoaderManager.java
#    android/app/ListActivity.java 
    android/support/v7/internal/view/menu/MenuItemImpl.java
    android/support/v7/internal/view/menu/SubMenuBuilder.java
    android/support/v7/internal/view/menu/MenuBuilder.java
    android/support/v7/internal/view/menu/SubMenuWrapperICS.java

# This list of space separated files are searched in the 'addJava'-directory. They 
# are used as they are (e.g. not stubified). Before compilation these files get copied
# to the root-folder of the "$WORK-DIR/sources" directory and added tot the compilation.
# The file StubFields.java is required! It contains fields and singletons not present in
# the vanilla stubs.
additional = StubFields.java 
    UiAutomation.java 
    android/support/v7/appcompat/R.java
    android/app/Activity.java
    android/content/Intent.java
    android/os/Bundle.java 
#    com/android/ide/common/rendering/api/RenderResources.java 
#    com/android/ide/common/rendering/api/IProjectCallback.java
#    com/android/ide/common/rendering/api/ProjectCallbackDummy.java
#    java/rmi/server/RemoteObjectInvocationHandler.java
    android/view/DummyContextMenu.java
#    android/view/View.java
#    dummy/DummyIntentSender.java
    dummy/LocationListeners.java
    dummy/DateTimeListener.java
    dummy/Misc.java
#    com/android/frameworks/coretests/R.java
#        android/widget/TextView.java
#    android/view/ContextThemeWrapper.java

# These directorys will be deleted before generating the jar
prune = java
    javax
    junit
    assets
    bars
    org
    res

[stubify]
# This section contains information on functions and classes to change in the files
# mentioned in 'copy_in'

# The following classes are added to the imports of each java-file. The list is 
# white-space separated.
# Changing this value does not alter 'copy_in' or 'additional' thus the declaring file
# should already be present there (or in the vanilla jars).
# BUG: If there is not at least one import-statement in the target file these wont be added!
add_import = android.StubFields 

# On all new-sites of these classes a new instance of Object is generated and cast to the Class-Type:
# for example "new Foo(...)" is replaced with "((Foo) new Object())"
as_object = MessageQueue UserHandle InputManager SearchManager PendingIntent MenuInflater PreferenceScreen 

# These strings are replaced by integer values
# The value used is '1 << n' for the n-th constant mentioned. If more control on the actual
# value is needed these may be treated as fields too (see 'replace_fields')
int_consts = ActivityManager.START_CANCELED ActivityManager.START_FLAG_ONLY_IF_NEEDED ActivityManager.START_RETURN_INTENT_TO_CALLER ActivityManager.INTENT_SENDER_ACTIVITY_RESULT InputManager.INJECT_INPUT_EVENT_MODE_WAIT_FOR_FINISH ActivityManager.START_SUCCESS ActivityManager.START_INTENT_NOT_RESOLVED ActivityManager.START_CLASS_NOT_FOUND ActivityManager.START_PERMISSION_DENIED ActivityManager.START_FORWARD_AND_REQUEST_CONFLICT ActivityManager.START_NOT_ACTIVITY MetaKeyKeyListener.META_SELECTING DynamicLayout.INVALID_BLOCK_INDEX ID_SELECT_ALL ID_CUT ID_PASTE ID_COPY UserHandle.USER_CURRENT 

str_consts = Settings.ACTION_USER_DICTIONARY_INSERT

# All Fields mentioned here are replaced by the corresponding field in addJava/StubFields.java
# The strings mentioned below are matched 1:1 to the java source file (text replacement only)
# The mentioned field "foo.bar" will get replaced with the static field "android.StubFields.bar"
# which has to be specified manually there.
replace_fields = looper.mQueue target.mWho fragment.mWho fragment.mView fragment.mSavedFragmentState fragment.mRetaining fragment.mInLayout fragment.mFragmentManager fragment.mTag fragment.mContainerId fragment.mFragmentId fragment.mFromLayout

# These functions (which return an integer or void) are replaced with a call to hashCode()
# The objects/instances these functions get called on dont get respected. However at least it
# is assured no partial function-names get matched.
# For an entry "foo" in this whitespace separated list a replacement is done like: "bar.foo(a, b c)" 
# will become "bar.hashCode()"
hash_functions = getIdentifier setRemote 

# Functions in this list get replaced like the ones in "hash_funktions". However ".toString()" 
# is used instead.
string_functions = getBasePackageName prepareToLeaveProcess migrateExtraStreamToClipData 

# Like "hash_functions" and "string_functions" but using ".equals(42)"
equals_functions = shouldCloseOnTouch  

# A call to these functions will get replaced with "null". If is the only statement it gets 
# zapped completely.
# So if "foo" is listed the list the replacements are: "bar(foo(17)); foo;" -> "bar(null); /*ZAP*/"
zap_function = readStringArray dispatchOnCreate setCloseOnTouchOutside setPrivateFactory destroy injectInputEvent setPrivateFactory buildShortClassTag getContentObserver releaseContentObserver coerceToLocalContentProvider peekInstance
    getTwoDigitFormatter drawBackground getBlockEndLines getBlockIndices drawText setIndexFirstChangedBlock 
    getStateDrawable getPendingIntent notifySelection getCompatibilityInfo
    setCompatibilityScaling getCurrentSpellCheckerSubtype getStateSet getTimeFormatString

# Like "zap_function" but using 42 instead of null.
int_zap_function = getCurrentAnimationsCount myUserId reopenReadWrite getCallingUserId
    setLayoutDirection dispatchOnGlobalFocusChange focusIn focusOut 
    getPrimaryHorizontal unpackRangeStartFromLong packRangeInLong getLineRangeForDraw
    unpackRangeEndFromLong getNumberOfBlocks getIndexFirstChangedBlock setDeleteEnabled
    getStateDrawableIndex getStateCount getUnderlineColor
    getSecondaryHorizontal getScaledDoubleTapTouchSlop sizeToString
    selectDefaultTheme

# Like "zap_function" but using false instead of null.
false_zap_function = hasRtlSupport isLevelBoundary shouldClampCursor isDeleteEnabled
    isSpellCheckerEnabled hasSeconds

# These calls are replaced with a "singleton_" - field from StubFields.
# Example: "foo.getInstance().bar" -> "android.StubFields.singleton_foo_getInstance.bar"
singleton = InputManager.getInstance() mWindow.getLayoutInflater()

# lines starting with this are deleted
delete_lines = 
    @SdkConstant
    @Widget
    import.android.annotation
